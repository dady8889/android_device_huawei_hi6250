#!/bin/bash
# Copyright (C) 2017 dady8889@github
# Utility made for patching git repositories

function invalidargs() {
	echo "Try 'patchtool --help' for more information."
}

function helpcommand() {
	echo "Usage: patchtool -M [OPTION]"
	echo "Utility for patching git repositories"
	echo ""
	echo "We are checking for header in patch files which:"
	echo "1) must be located on the first line of file"
	echo "2) must be in form '%TARGET=\"<TARGET REPOSITORY>\"'"
	echo "   e.g. '%TARGET=\"frameworks/native\"'"
	echo "You should use the git-makepatch tool which does this automatically"
	echo ""
	echo "-p, --patch       use 'patch' for every .patch file in this directory/subdirectories"
	echo "-a, --apply       use 'git apply' for every .apply file in this directory/subdirectories"
	echo "-c, --clear       revert all applied patches in respective repositories"
	echo ""
	echo "Optional arguments:"
	echo "-M, --message     print error message if present"
}

function finishcommand() {
	echo ""
	if [[ ! $ERRORNUM == 0 ]] ; then
		echo -ne "${RED}Found $ERRORNUM errors.${NC} "
	fi
	if [[ ! $OKNUM == 0 ]] ; then
		echo -ne "${GREEN}$OKNUM actions were completed.${NC} "
	fi
	echo ""
}

function checkheader() {
	if [[ -z "$REPO" ]] || [[ $REPO != "%TARGET=\""* ]] || [[ ${REPO: -1} != "\"" ]]; then
		echo -e " -> ${RED}Required header not found. Skipping...${NC}"
		ERRORNUM=$(($ERRORNUM+1))
		continue
	fi
}

function clearpatchescommand() {
	local LINENUM=0
	for LINE in $(echo $(find -name *.patch) | cut -c 3-; echo $(find -name *.apply) | cut -c 3-)
	do
		LINENUM=$(($LINENUM+1))
		REPO=$(head -n 1 $LINE)

		checkheader

		REPO=${REPO:9} # delete first 9 characters
		REPO=${REPO%?} # delete last 1 character
		SHORTREPO=$REPO

		if [[ $(echo $CLEARED | grep -c "$REPO") -gt 0 ]]; then
			continue
		fi

		echo -ne "${BLUE}Clearing repository${NC}"

		cd $TOPDIR
		if [[ ! -e $REPO ]]; then
			echo -e " -> ${RED}Repository ${YELLOW}$SHORTREPO${RED} does not exist. Skipping...${NC}"
			CLEARED="$CLEARED|$REPO|"
			cd $THISDIR
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi

		echo -e " -> ${YELLOW}$REPO${NC}"

		cd $REPO
		git add . > /dev/null
		git stash > /dev/null
		find -name *.orig | while read LINE; do rm $LINE; done
		find -name *.rej | while read LINE; do rm $LINE; done
		git clean -f > /dev/null
		git stash clear > /dev/null
		CLEARED="$CLEARED|$REPO|"
		cd $THISDIR
		OKNUM=$(($OKNUM+1))
	done
	if [[ $LINENUM == 0 ]] ; then
		echo -e "${BLUE}No patches were found in this directory.${NC}"
	else
		finishcommand
	fi
}

function patchcommand() {
	local LINENUM=0
	for LINE in $(find -name '*.patch' | cut -c 3- | sort)
	do
		LINENUM=$(($LINENUM+1))
		PATCH="$THISDIR/$LINE"
		REPO=$(head -n 1 $PATCH)

		echo -ne "${BLUE}Applying patch: ${YELLOW}$LINE${NC}"

		checkheader

		REPO=${REPO:9} # delete first 9 characters
		REPO=${REPO%?} # delete last 1 character
		SHORTREPO=$REPO

		echo -ne " -> ${YELLOW}$REPO${NC}"
		REPO="$TOPDIR$REPO"
		cd $TOPDIR
		if [[ ! -e $REPO ]]; then
			echo -e " -> ${RED}Repository ${YELLOW}$SHORTREPO${RED} does not exist. Skipping...${NC}"
			cd $THISDIR
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi

		cd $REPO
		RESULT=$(patch '-p1' '--follow-symlinks' '--no-backup-if-mismatch' < $PATCH 2>&1)
		cd $THISDIR

		# show the patch result
		if [[ $MESSAGE == true ]] ; then
			echo -e "\n -> ${RESULT}"
		fi

		if [[ $(echo $RESULT | grep -c "Reversed (or previously applied) patch detected") -gt 0 ]] ; then
			echo -e  " -> ${BI_MAGENTA}Already patched. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi
		if [[ $(echo $RESULT | grep -c "can't find") -gt 0 ]] ; then
			echo -e " -> ${RED}Can't find specific file. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi
		if [[ $(echo $RESULT | grep -c FAILED) -gt 0 ]] ; then
			echo -e " -> ${RED}Patch failed. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi
		if [[ $(echo $RESULT | grep -c "saving rejects to file") -gt 0 ]] ; then
			echo -e  " -> ${RED}Patch rejected, edit target manually. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi
		if [[ $(echo $RESULT | grep -c "garbage\|malformed") -gt 0 ]] ; then
			echo -e  " -> ${RED}Invalid syntax. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi

		echo -e  " -> ${GREEN}Done${NC}"
		OKNUM=$(($OKNUM+1))
	done
	if [[ $LINENUM == 0 ]] ; then
		echo -e "${BLUE}No patches were found in this directory.${NC}"
	else
		finishcommand
	fi
}

function applycommand() {
	local LINENUM=0
	for LINE in $(find -name *.apply | cut -c 3- | sort)
	do
		LINENUM=$(($LINENUM+1))
		PATCH="$THISDIR/$LINE"
		REPO=$(head -n 1 $PATCH)

		echo -ne "${BLUE}Applying patch: ${YELLOW}$LINE${NC}"

		checkheader

		REPO=${REPO:9} # delete first 9 characters
		REPO=${REPO%?} # delete last 1 character
		SHORTREPO=$REPO

		echo -ne " -> ${YELLOW}$REPO${NC}"
		REPO="$TOPDIR$REPO"
		cd $TOPDIR
		if [[ ! -e $REPO ]]; then
			echo -e " -> ${RED}Repository ${YELLOW}$SHORTREPO${RED} does not exist. Skipping...${NC}"
			cd $THISDIR
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi

		cd $REPO
		RESULT=$(git apply --whitespace=nowarn -v $PATCH 2>&1)
		cd $THISDIR
		# show the patch result
		if [[ $MESSAGE == true ]]; then
			echo -e "\n -> ${RESULT}"
		fi

		if [[ $(echo $RESULT | grep -c error:) -gt 0 ]] ; then
			echo -e " -> ${RED}Patch failed. Skipping...${NC}"
			ERRORNUM=$(($ERRORNUM+1))
			continue
		fi

		echo -e  " -> ${GREEN}Done${NC}"
		OKNUM=$(($OKNUM+1))
	done
	if [[ $LINENUM == 0 ]] ; then
		echo -e "${BLUE}No patches were found in this directory.${NC}"
	else
		finishcommand
	fi
}

if [[ ! $# -gt 0 ]] ; then
	invalidargs
	exit 1
fi

THISDIR="$PWD"
TOPDIR="$THISDIR/../../../../"
CLEARED=""
ERRORNUM=0
OKNUM=0

NC='\033[0m' # No Color
RED='\033[0;91m'
BLUE='\033[0;94m'
YELLOW='\033[0;93m'
GREEN='\033[0;92m'
BI_MAGENTA='\033[1;95m'

while [[ $# -gt 0 ]]
do
	arg="$1"
	case $arg in
		-M|--message)
		MESSAGE=true
		;;
		-p|--patch)
		ACTION=true
		patchcommand
		;;
		-a|--apply)
		ACTION=true
		applycommand
		;;
		-c|--clear)
		ACTION=true
		clearpatchescommand
		;;
		--help)
		ACTION=true
		helpcommand
		;;
		*)
		echo "patchtool: unrecognized option '$arg'"
		invalidargs
		exit 1
		;;
	esac
	shift
done

if [[ -z $ACTION ]]; then
	invalidargs
	exit 1
fi
