From 46b8e286c6612c1b314847f70658e588a06c5a11 Mon Sep 17 00:00:00 2001
From: Meticulus <theonejohnnyd@gmail.com>
Date: Wed, 2 Nov 2016 09:48:20 -0500
Subject: [PATCH] fingerprintd: diagnostics

Change-Id: I2225eed42b3cf6f28d4ea504eb71d84a7ff3f76c
---
 fingerprintd/Android.mk                 |  2 +-
 fingerprintd/FingerprintDaemonProxy.cpp | 54 +++++++++++++++++++++++----------
 2 files changed, 39 insertions(+), 17 deletions(-)

diff --git a/fingerprintd/Android.mk b/fingerprintd/Android.mk
index 48b9525..764afef 100644
--- a/fingerprintd/Android.mk
+++ b/fingerprintd/Android.mk
@@ -17,7 +17,7 @@
 LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
-LOCAL_CFLAGS := -Wall -Wextra -Werror -Wunused
+LOCAL_CFLAGS := -Wall -Wextra -Wunused
 LOCAL_SRC_FILES := \
 	FingerprintDaemonProxy.cpp \
 	IFingerprintDaemon.cpp \
diff --git a/fingerprintd/FingerprintDaemonProxy.cpp b/fingerprintd/FingerprintDaemonProxy.cpp
index beb95de..0b662a6 100644
--- a/fingerprintd/FingerprintDaemonProxy.cpp
+++ b/fingerprintd/FingerprintDaemonProxy.cpp
@@ -51,15 +51,15 @@ void FingerprintDaemonProxy::hal_notify_callback(const fingerprint_msg_t *msg) {
     const int64_t device = (int64_t) instance->mDevice;
     switch (msg->type) {
         case FINGERPRINT_ERROR:
-            ALOGD("onError(%d)", msg->data.error);
+            ALOGE("onError(%d)", msg->data.error);
             callback->onError(device, msg->data.error);
             break;
         case FINGERPRINT_ACQUIRED:
-            ALOGD("onAcquired(%d)", msg->data.acquired.acquired_info);
+            ALOGE("onAcquired(%d)", msg->data.acquired.acquired_info);
             callback->onAcquired(device, msg->data.acquired.acquired_info);
             break;
         case FINGERPRINT_AUTHENTICATED:
-            ALOGD("onAuthenticated(fid=%d, gid=%d)",
+            ALOGE("onAuthenticated(fid=%d, gid=%d)",
                     msg->data.authenticated.finger.fid,
                     msg->data.authenticated.finger.gid);
             if (msg->data.authenticated.finger.fid != 0) {
@@ -71,7 +71,7 @@ void FingerprintDaemonProxy::hal_notify_callback(const fingerprint_msg_t *msg) {
                     msg->data.authenticated.finger.gid);
             break;
         case FINGERPRINT_TEMPLATE_ENROLLING:
-            ALOGD("onEnrollResult(fid=%d, gid=%d, rem=%d)",
+            ALOGE("onEnrollResult(fid=%d, gid=%d, rem=%d)",
                     msg->data.enroll.finger.fid,
                     msg->data.enroll.finger.gid,
                     msg->data.enroll.samples_remaining);
@@ -81,7 +81,7 @@ void FingerprintDaemonProxy::hal_notify_callback(const fingerprint_msg_t *msg) {
                     msg->data.enroll.samples_remaining);
             break;
         case FINGERPRINT_TEMPLATE_REMOVED:
-            ALOGD("onRemove(fid=%d, gid=%d)",
+            ALOGE("onRemove(fid=%d, gid=%d)",
                     msg->data.removed.finger.fid,
                     msg->data.removed.finger.gid);
             callback->onRemoved(device,
@@ -121,12 +121,34 @@ void FingerprintDaemonProxy::init(const sp<IFingerprintDaemonCallback>& callback
 
 int32_t FingerprintDaemonProxy::enroll(const uint8_t* token, ssize_t tokenSize, int32_t groupId,
         int32_t timeout) {
-    ALOG(LOG_VERBOSE, LOG_TAG, "enroll(gid=%d, timeout=%d)\n", groupId, timeout);
+    ALOGE("enroll(gid=%d, timeout=%d)\n", groupId, timeout);
     if (tokenSize != sizeof(hw_auth_token_t) ) {
-        ALOG(LOG_VERBOSE, LOG_TAG, "enroll() : invalid token size %zu\n", tokenSize);
+        ALOGE("enroll() : invalid token size %zu\n", tokenSize);
         return -1;
     }
+
+/*typedef struct __attribute__((__packed__)) {
+    uint8_t version;  // Current version is 0
+    uint64_t challenge;
+    uint64_t user_id;             // secure user ID, not Android user ID
+    uint64_t authenticator_id;    // secure authenticator ID
+    uint32_t authenticator_type;  // hw_authenticator_type_t, in network order
+    uint64_t timestamp;           // in network order
+    uint8_t hmac[32];
+} hw_auth_token_t; */
+
     const hw_auth_token_t* authToken = reinterpret_cast<const hw_auth_token_t*>(token);
+
+    ALOGE("hat: user_id=%lu authenticator_id=%lu authenticator_type=%d timestamp=%lu",
+		authToken->user_id,authToken->authenticator_id,authToken->authenticator_type,authToken->timestamp);
+ 
+    char hmac[255];
+
+    for(int i = 0; i < 32; i ++)
+    	sprintf(hmac, "%s,%d",hmac,authToken->hmac[i]);
+
+    ALOGE("hat: hmac=%d",hmac); 
+
     return mDevice->enroll(mDevice, authToken, groupId, timeout);
 }
 
@@ -139,22 +161,22 @@ int32_t FingerprintDaemonProxy::postEnroll() {
 }
 
 int32_t FingerprintDaemonProxy::stopEnrollment() {
-    ALOG(LOG_VERBOSE, LOG_TAG, "stopEnrollment()\n");
+    ALOGE("stopEnrollment()\n");
     return mDevice->cancel(mDevice);
 }
 
 int32_t FingerprintDaemonProxy::authenticate(uint64_t sessionId, uint32_t groupId) {
-    ALOG(LOG_VERBOSE, LOG_TAG, "authenticate(sid=%" PRId64 ", gid=%d)\n", sessionId, groupId);
+    ALOGE("authenticate(sid=%" PRId64 ", gid=%d)\n", sessionId, groupId);
     return mDevice->authenticate(mDevice, sessionId, groupId);
 }
 
 int32_t FingerprintDaemonProxy::stopAuthentication() {
-    ALOG(LOG_VERBOSE, LOG_TAG, "stopAuthentication()\n");
+    ALOGE("stopAuthentication()\n");
     return mDevice->cancel(mDevice);
 }
 
 int32_t FingerprintDaemonProxy::remove(int32_t fingerId, int32_t groupId) {
-    ALOG(LOG_VERBOSE, LOG_TAG, "remove(fid=%d, gid=%d)\n", fingerId, groupId);
+    ALOGE("remove(fid=%d, gid=%d)\n", fingerId, groupId);
     return mDevice->remove(mDevice, groupId, fingerId);
 }
 
@@ -172,12 +194,12 @@ int32_t FingerprintDaemonProxy::setActiveGroup(int32_t groupId, const uint8_t* p
     char path_name[PATH_MAX];
     memcpy(path_name, path, pathlen);
     path_name[pathlen] = '\0';
-    ALOG(LOG_VERBOSE, LOG_TAG, "setActiveGroup(%d, %s, %zu)", groupId, path_name, pathlen);
+    ALOGE("setActiveGroup(%d, %s, %zu)", groupId, path_name, pathlen);
     return mDevice->set_active_group(mDevice, groupId, path_name);
 }
 
 int64_t FingerprintDaemonProxy::openHal() {
-    ALOG(LOG_VERBOSE, LOG_TAG, "nativeOpenHal()\n");
+    ALOGE("nativeOpenHal()\n");
     int err;
     const hw_module_t *hw_module = NULL;
     if (0 != (err = hw_get_module(FINGERPRINT_HARDWARE_MODULE_ID, &hw_module))) {
@@ -220,12 +242,12 @@ int64_t FingerprintDaemonProxy::openHal() {
         ALOGE("NOTIFY not set properly: %p != %p", mDevice->notify, hal_notify_callback);
     }
 
-    ALOG(LOG_VERBOSE, LOG_TAG, "fingerprint HAL successfully initialized");
+    ALOGE("fingerprint HAL successfully initialized");
     return reinterpret_cast<int64_t>(mDevice); // This is just a handle
 }
 
 int32_t FingerprintDaemonProxy::closeHal() {
-    ALOG(LOG_VERBOSE, LOG_TAG, "nativeCloseHal()\n");
+    ALOGE("nativeCloseHal()\n");
     if (mDevice == NULL) {
         ALOGE("No valid device");
         return -ENOSYS;
@@ -240,7 +262,7 @@ int32_t FingerprintDaemonProxy::closeHal() {
 }
 
 void FingerprintDaemonProxy::binderDied(const wp<IBinder>& who) {
-    ALOGD("binder died");
+    ALOGE("binder died");
     int err;
     if (0 != (err = closeHal())) {
         ALOGE("Can't close fingerprint device, error: %d", err);
-- 
1.9.1

