From 5509be8458e20cb96f0d9d8588a4adf683ac2150 Mon Sep 17 00:00:00 2001
From: Meticulus <theonejohnnyd@gmail.com>
Date: Mon, 31 Oct 2016 09:45:48 -0500
Subject: [PATCH] 0001-disable_se_linux

Change-Id: I865a98f84b404fddeb14f0c87450aac6b7db6cf3
---
 init/Android.mk |  1 -
 init/init.cpp   | 28 ++++++++++++++++------------
 init/util.cpp   | 22 ++++++++++++++++++++++
 init/util.h     |  1 +
 4 files changed, 39 insertions(+), 13 deletions(-)

diff --git a/init/Android.mk b/init/Android.mk
index 85dfbfc..7afe762 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -16,7 +16,6 @@ init_cflags += \
     $(init_options) \
     -Wall -Wextra \
     -Wno-unused-parameter \
-    -Werror \
 
 init_clang := true
 
diff --git a/init/init.cpp b/init/init.cpp
index 58d7d34..9b96a26 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -915,24 +915,28 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
 static bool selinux_is_disabled(void)
 {
-    if (ALLOW_DISABLE_SELINUX) {
-        if (access("/sys/fs/selinux", F_OK) != 0) {
-            // SELinux is not compiled into the kernel, or has been disabled
-            // via the kernel command line "selinux=0".
-            return true;
+    if(we_are_in_recovery()) {
+        if (ALLOW_DISABLE_SELINUX) {
+            if (access("/sys/fs/selinux", F_OK) != 0) {
+                // SELinux is not compiled into the kernel, or has been disabled
+                // via the kernel command line "selinux=0".
+                return true;
+           }
+            return selinux_status_from_cmdline() == SELINUX_DISABLED;
         }
-        return selinux_status_from_cmdline() == SELINUX_DISABLED;
-    }
 
-    return false;
+        return false;
+    } else { return true; }
 }
 
 static bool selinux_is_enforcing(void)
 {
-    if (ALLOW_DISABLE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
-    }
-    return true;
+    if(we_are_in_recovery()) {
+    	if (ALLOW_DISABLE_SELINUX) {
+            return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+        }
+        return true;
+    } else { return false; }
 }
 
 int selinux_reload_policy(void)
diff --git a/init/util.cpp b/init/util.cpp
index b006e0b..c74582b 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -430,6 +430,28 @@ void import_kernel_cmdline(bool in_qemu, std::function<void(char*,bool)> import_
     }
 }
 
+bool we_are_in_recovery(void) {
+    char cmdline[2048];
+    int fd;
+
+    fd = open("/proc/cmdline", O_RDONLY | O_CLOEXEC);
+    if (fd >= 0) {
+        int n = read(fd, cmdline, sizeof(cmdline) - 1);
+        if (n < 0) n = 0;
+
+        /* get rid of trailing newline, it happens */
+        if (n > 0 && cmdline[n-1] == '\n') n--;
+        cmdline[n] = 0;
+        close(fd);
+	INFO("Meticulus: cmdline=%s",cmdline);
+    } else {
+        cmdline[0] = 0;
+	ERROR("Meticulus cmdline is empty!");
+    }
+
+    return strstr(cmdline,"enter_recovery=1") != NULL ? true : false;
+}
+
 int make_dir(const char *path, mode_t mode)
 {
     int rc;
diff --git a/init/util.h b/init/util.h
index 09d64cd..30f9884 100644
--- a/init/util.h
+++ b/init/util.h
@@ -59,6 +59,7 @@ void remove_link(const char *oldpath, const char *newpath);
 int wait_for_file(const char *filename, int timeout);
 void open_devnull_stdio(void);
 void import_kernel_cmdline(bool in_qemu, std::function<void(char*,bool)>);
+bool we_are_in_recovery(void);
 int make_dir(const char *path, mode_t mode);
 int restorecon(const char *pathname);
 int restorecon_recursive(const char *pathname);
-- 
1.9.1

